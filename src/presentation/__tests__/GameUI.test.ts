import { JSDOM } from 'jsdom';

// JSDOMÁí∞Â¢É„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
const dom = new JSDOM(`<!DOCTYPE html>
<html>
<head>
    <title>Test</title>
</head>
<body>
    <div id="app">
        <header class="game-header">
            <h1>üéÆ „Ç≠„Éº„Éú„Éº„Éâ„Çø„Ç§„Éî„É≥„Ç∞„Ç≤„Éº„É† üéÆ</h1>
            <div class="game-status">
                <span id="game-state">Ê∫ñÂÇô‰∏≠</span>
            </div>
        </header>
        <main class="game-container">
            <section id="setup-screen" class="screen active">
                <div class="setup-panel">
                    <select id="team-count" class="setting-input">
                        <option value="2">2„ÉÅ„Éº„É†</option>
                        <option value="3">3„ÉÅ„Éº„É†</option>
                        <option value="4">4„ÉÅ„Éº„É†</option>
                    </select>
                    <select id="difficulty" class="setting-input">
                        <option value="easy">„ÇÑ„Åï„Åó„ÅÑ</option>
                    </select>
                    <div id="keyboard-list" class="keyboard-list">
                        <div class="loading">„Ç≠„Éº„Éú„Éº„Éâ„ÇíÊ§úÁü•„Åó„Å¶„ÅÑ„Åæ„Åô...</div>
                    </div>
                    <button id="start-game-btn" class="btn btn-primary btn-large" disabled>
                        „Ç≤„Éº„É†ÈñãÂßã
                    </button>
                </div>
            </section>
            <section id="game-screen" class="screen">
                <div class="game-info">
                    <div class="current-word">
                        <h2 id="target-word">ÂçòË™û„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô</h2>
                    </div>
                    <div class="game-timer">
                        <span id="timer">60</span>Áßí
                    </div>
                </div>
                <div id="teams-container" class="teams-container"></div>
            </section>
            <section id="result-screen" class="screen">
                <div class="result-panel">
                    <div id="results-list" class="results-list"></div>
                    <button id="restart-btn" class="btn btn-primary btn-large">
                        „ÇÇ„ÅÜ‰∏ÄÂ∫¶ÈÅä„Å∂
                    </button>
                </div>
            </section>
        </main>
    </div>
</body>
</html>`);

global.window = dom.window as any;
global.document = dom.window.document;
global.HTMLElement = dom.window.HTMLElement;
global.Element = dom.window.Element;

// Web Audio API „É¢„ÉÉ„ÇØ
class MockAudioContext {
    sampleRate = 44100;
    createBuffer = jest.fn().mockReturnValue({
        getChannelData: jest.fn().mockReturnValue(new Float32Array(1000))
    });
    createBufferSource = jest.fn().mockReturnValue({
        buffer: null,
        connect: jest.fn(),
        start: jest.fn()
    });
    createGain = jest.fn().mockReturnValue({
        gain: { value: 1 },
        connect: jest.fn()
    });
    destination = {};
}

global.window.AudioContext = MockAudioContext as any;
(global.window as any).webkitAudioContext = MockAudioContext as any;

// KeyboardGameAPI „É¢„ÉÉ„ÇØ
const mockKeyboardAPI = {
    onKeyboardInput: jest.fn(),
    startGame: jest.fn().mockResolvedValue(undefined),
    stopGame: jest.fn().mockResolvedValue(undefined),
    getKeyboards: jest.fn().mockResolvedValue([
        { id: 'keyboard-1', name: '„ÉÜ„Çπ„Éà„Ç≠„Éº„Éú„Éº„Éâ1' },
        { id: 'keyboard-2', name: '„ÉÜ„Çπ„Éà„Ç≠„Éº„Éú„Éº„Éâ2' }
    ])
};

global.window.keyboardGameAPI = mockKeyboardAPI;

// „ÉÜ„Çπ„ÉàÂØæË±°„ÅÆ„Ç§„É≥„Éù„Éº„Éà
import '../renderer';

describe('GameUI', () => {
    beforeEach(() => {
        // DOMË¶ÅÁ¥†„Çí„É™„Çª„ÉÉ„Éà
        document.getElementById('setup-screen')?.classList.add('active');
        document.getElementById('game-screen')?.classList.remove('active');
        document.getElementById('result-screen')?.classList.remove('active');
        
        // „Ç≤„Éº„É†Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        const gameState = document.getElementById('game-state');
        if (gameState) gameState.textContent = 'Ê∫ñÂÇô‰∏≠';
        
        // „É¢„ÉÉ„ÇØ„Çí„É™„Çª„ÉÉ„Éà
        jest.clearAllMocks();
    });

    describe('ÂàùÊúüÂåñ', () => {
        test('ÂàùÊúüÁîªÈù¢„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
            const setupScreen = document.getElementById('setup-screen');
            const gameScreen = document.getElementById('game-screen');
            const resultScreen = document.getElementById('result-screen');

            expect(setupScreen?.classList.contains('active')).toBe(true);
            expect(gameScreen?.classList.contains('active')).toBe(false);
            expect(resultScreen?.classList.contains('active')).toBe(false);
        });

        test('„Ç≤„Éº„É†Áä∂ÊÖã„ÅåÂàùÊúüÂÄ§„ÅßË°®Á§∫„Åï„Çå„Çã', () => {
            const gameState = document.getElementById('game-state');
            expect(gameState?.textContent).toBe('Ê∫ñÂÇô‰∏≠');
        });

        test('ÈñãÂßã„Éú„Çø„É≥„ÅåÂ≠òÂú®„Åô„Çã', () => {
            const startButton = document.getElementById('start-game-btn') as HTMLButtonElement;
            expect(startButton).toBeTruthy();
            expect(startButton?.textContent?.trim()).toBe('„Ç≤„Éº„É†ÈñãÂßã');
        });
    });

    describe('„Ç≠„Éº„Éú„Éº„ÉâÁÆ°ÁêÜ', () => {
        test('„Ç≠„Éº„Éú„Éº„Éâ„É™„Çπ„Éà„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
            const keyboardList = document.getElementById('keyboard-list');
            expect(keyboardList).toBeTruthy();
            
            // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂæå„Å´„Ç≠„Éº„Éú„Éº„Éâ‰∏ÄË¶ß„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
            // ÂÆüÈöõ„ÅÆ„Ç¢„Éó„É™„Åß„ÅØ„É¢„ÉÉ„ÇØAPI„ÅåÂëº„Å≥Âá∫„Åï„Çå„ÄÅ„Ç≠„Éº„Éú„Éº„Éâ„Ç¢„Ç§„ÉÜ„É†„ÅåË°®Á§∫„Åï„Çå„Çã
            expect(keyboardList?.innerHTML).toMatch(/(„Ç≠„Éº„Éú„Éº„Éâ„ÇíÊ§úÁü•„Åó„Å¶„ÅÑ„Åæ„Åô|„ÉÜ„Çπ„Éà„Ç≠„Éº„Éú„Éº„Éâ)/);
        });
    });

    describe('„ÉÅ„Éº„É†Ë®≠ÂÆö', () => {
        test('„ÉÅ„Éº„É†Êï∞„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã', () => {
            const teamCountSelect = document.getElementById('team-count') as HTMLSelectElement;
            teamCountSelect.value = '3';
            
            // change „Ç§„Éô„É≥„Éà„Çí„Éá„Ç£„Çπ„Éë„ÉÉ„ÉÅ
            const changeEvent = new dom.window.Event('change');
            teamCountSelect.dispatchEvent(changeEvent);

            expect(teamCountSelect.value).toBe('3');
        });

        test('„ÉÅ„Éº„É†Êï∞Â§âÊõ¥„Åß„Ç≠„Éº„Éú„Éº„ÉâÂâ≤„ÇäÂΩì„Å¶„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', () => {
            const teamCountSelect = document.getElementById('team-count') as HTMLSelectElement;
            teamCountSelect.value = '4';
            
            const changeEvent = new dom.window.Event('change');
            teamCountSelect.dispatchEvent(changeEvent);

            // „ÉÅ„Éº„É†Êï∞„Å´Âøú„Åò„Å¶„Ç≠„Éº„Éú„Éº„Éâ„ÅÆÂâ≤„ÇäÂΩì„Å¶Áä∂ÊÖã„ÅåÂ§â„Çè„Çã„Åì„Å®„ÇíÊúüÂæÖ
            expect(teamCountSelect.value).toBe('4');
        });
    });

    describe('ÁîªÈù¢ÈÅ∑Áßª', () => {
        test('ÁîªÈù¢Ë°®Á§∫„ÅÆÂàá„ÇäÊõø„Åà„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', () => {
            // „Ç≤„Éº„É†ÁîªÈù¢„Å∏„ÅÆÂàá„ÇäÊõø„Åà„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
            const setupScreen = document.getElementById('setup-screen');
            const gameScreen = document.getElementById('game-screen');

            setupScreen?.classList.remove('active');
            gameScreen?.classList.add('active');

            expect(setupScreen?.classList.contains('active')).toBe(false);
            expect(gameScreen?.classList.contains('active')).toBe(true);
        });
    });

    describe('UIË¶ÅÁ¥†„ÅÆË°®Á§∫', () => {
        test('„ÉÅ„Éº„É†Ë°®Á§∫„Ç®„É™„Ç¢„ÅåÂãïÁöÑ„Å´ÁîüÊàê„Åï„Çå„Çã', () => {
            const teamsContainer = document.getElementById('teams-container');
            expect(teamsContainer).toBeTruthy();

            // „ÉÜ„Çπ„Éà„Åß„ÉÅ„Éº„É†Ë°®Á§∫„ÇíÊ®°Êì¨
            teamsContainer!.innerHTML = `
                <div class="team-panel team-1">
                    <div class="team-name">„ÉÅ„Éº„É† 1</div>
                    <div class="team-score">0ÁÇπ</div>
                </div>
                <div class="team-panel team-2">
                    <div class="team-name">„ÉÅ„Éº„É† 2</div>
                    <div class="team-score">0ÁÇπ</div>
                </div>
            `;

            const teamPanels = teamsContainer!.querySelectorAll('.team-panel');
            expect(teamPanels.length).toBe(2);
        });

        test('ÂçòË™ûË°®Á§∫„Ç®„É™„Ç¢„ÅåÂ≠òÂú®„Åô„Çã', () => {
            const targetWord = document.getElementById('target-word');
            expect(targetWord).toBeTruthy();
            expect(targetWord?.textContent).toBe('ÂçòË™û„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô');
        });

        test('„Çø„Ç§„Éû„ÉºË°®Á§∫„Ç®„É™„Ç¢„ÅåÂ≠òÂú®„Åô„Çã', () => {
            const timer = document.getElementById('timer');
            expect(timer).toBeTruthy();
            expect(timer?.textContent).toBe('60');
        });
    });

    describe('„Éú„Çø„É≥„Ç§„Éô„É≥„Éà', () => {
        test('„É™„Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
            const restartButton = document.getElementById('restart-btn');
            expect(restartButton).toBeTruthy();
            
            // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºàÂÆüÈöõ„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÅØÂàùÊúüÂåñÊôÇ„Å´„ÉÜ„Çπ„ÉàÔºâ
            const clickEvent = new dom.window.Event('click');
            restartButton?.dispatchEvent(clickEvent);
            
            // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
            expect(true).toBe(true);
        });
    });

    describe('„É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú', () => {
        test('„ÉÅ„Éº„É†„Ç≥„É≥„ÉÜ„Éä„Åå„Ç∞„É™„ÉÉ„Éâ„É¨„Ç§„Ç¢„Ç¶„Éà„ÇíÊåÅ„Å§', () => {
            const teamsContainer = document.getElementById('teams-container');
            expect(teamsContainer?.className).toContain('teams-container');
        });
    });

    describe('„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£', () => {
        test('ÈÅ©Âàá„Å™HTMLÊßãÈÄ†„ÇíÊåÅ„Å§', () => {
            const app = document.getElementById('app');
            const header = app?.querySelector('header');
            const main = app?.querySelector('main');
            
            expect(header).toBeTruthy();
            expect(main).toBeTruthy();
        });

        test('„Éú„Çø„É≥„Å´ÈÅ©Âàá„Å™„ÇØ„É©„ÇπÂêç„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
            const startButton = document.getElementById('start-game-btn');
            const restartButton = document.getElementById('restart-btn');
            
            expect(startButton?.className).toContain('btn');
            expect(startButton?.className).toContain('btn-primary');
            expect(startButton?.className).toContain('btn-large');
            
            expect(restartButton?.className).toContain('btn');
            expect(restartButton?.className).toContain('btn-primary');
            expect(restartButton?.className).toContain('btn-large');
        });
    });

    describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
        test('Â≠òÂú®„Åó„Å™„ÅÑË¶ÅÁ¥†„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ', () => {
            // Â≠òÂú®„Åó„Å™„ÅÑË¶ÅÁ¥†„Å´„Ç¢„ÇØ„Çª„Çπ„Åó„Å¶„ÇÇ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
            const nonExistentElement = document.getElementById('non-existent');
            expect(nonExistentElement).toBeNull();
        });
    });
});

describe('SoundManagerÁµ±Âêà', () => {
    test('AudioContext„ÅåÈÅ©Âàá„Å´„É¢„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Çã', () => {
        expect(global.window.AudioContext).toBeDefined();
        expect((global.window as any).webkitAudioContext).toBeDefined();
    });

    test('„Çµ„Ç¶„É≥„ÉâÈñ¢ÈÄ£„ÅÆË¶ÅÁ¥†„ÅåÂ≠òÂú®„Åô„Çã', () => {
        // „Çµ„Ç¶„É≥„ÉâÂäπÊûú„Å´Èñ¢ÈÄ£„Åô„ÇãDOMË¶ÅÁ¥†„ÇÑ„ÇØ„É©„Çπ„ÅåÈÅ©Âàá„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        expect(document.querySelector('.screen')).toBeTruthy();
    });
});